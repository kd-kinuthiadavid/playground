{"version":3,"sources":["components/BlogPost/styles.js","components/BlogPost/index.js","components/PostsList/index.js","components/Loader/styles.js","components/Loader/index.js","components/Button/index.js","components/Alert/index.js","enums.js","config.js","containers/InfiniteScrolling/index.js","App.js","serviceWorker.js","index.js"],"names":["PostNumber","styled","div","Post","BlogPost","number","title","body","useState","showBody","state","setState","className","onClick","defaultProps","PostsList","postsList","map","post","key","id","ProgressLoader","bounce","keyframes","LoaderCircle","Loader","StyledBtn","button","ButtonContainer","Button","text","handleClick","Alert","content","role","xmlns","viewBox","d","alerts","NO_POSTS_TITLE","NO_POSTS_CONTENT","InfiniteScrolling","showBtn","showLoader","posts","filteredPosts","showFiltered","urlLimit","urlPage","showAlert","status","enums","useEffect","limit","page","a","url","config","axios","get","res","data","length","console","log","JSON","stringify","fetchPosts","window","addEventListener","document","documentElement","scrollHeight","scrollTop","clientHeight","removeEventListener","type","placeholder","onChange","e","searchTerm","target","value","toUpperCase","filtered","filter","indexOf","setTimeout","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1eedd683.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const PostNumber = styled.div`\n  position: absolute;\n  top: -10px;\n  left: -10px;\n  background-color: palevioletred;\n  color: white;\n  border-radius: 50%;\n  margin-left: 5px;\n  height: 40px;\n  width: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const Post = styled.div`\n  cursor: pointer;\n`;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { PostNumber, Post } from \"./styles\";\n\nconst BlogPost = ({ number, title, body }) => {\n  const [state, setState] = useState({\n    showBody: false,\n  });\n\n  const { showBody } = state;\n\n  const expandPost = () =>\n    setState((state) => ({ ...state, showBody: !showBody }));\n  return (\n    <Post\n      className=\"bg-pink-200 relative text-dark rounded sm:mx-auto my-5 max-w-md shadow-md mx-2 p-5\"\n      onClick={expandPost}\n    >\n      <PostNumber>{number}</PostNumber>\n      <div className=\"text-lg mb-3 capitalize font-semibold pt-5\">{title}</div>\n      {showBody && <div className=\"text-base\">{body}</div>}\n    </Post>\n  );\n};\n\nBlogPost.defaultProps = {\n  number: 1,\n  title: \"Lorem ipsum dolor sit amet\",\n  body: `Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatibus\n    quia, nulla! Maiores et perferendis eaque, exercitationem praesentium\n    nihil.`,\n};\n\nBlogPost.propTypes = {\n  number: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n};\n\nexport default BlogPost;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Post from \"../BlogPost\";\n\nconst PostsList = ({ postsList }) => {\n  return (\n    <div>\n      {postsList.map((post) => (\n        <Post\n          key={post.id}\n          title={post.title}\n          body={post.body}\n          number={post.id}\n        />\n      ))}\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  postsList: PropTypes.array.isRequired,\n};\n\nexport default PostsList;\n","import styled, { keyframes } from \"styled-components\";\n\nexport const ProgressLoader = styled.div`\n  display: flex;\n  transition: opacity 0.3s ease-in;\n  justify-content: center;\n  align-items: center;\n  margin: 10px 50px;\n`;\n\nexport const bounce = keyframes`\n  0%, 100% { transform: translateY(0); }\n  50% { transform: translateY(-10px); }\n`;\n\nexport const LoaderCircle = styled.div`\n  &:nth-child(2) {\n    animation-delay: 0.2s;\n  }\n  &:nth-child(3) {\n    animation-delay: 0.3s;\n  }\n  background-color: palevioletred;\n  height: 10px;\n  width: 10px;\n  margin: 5px;\n  border-radius: 50%;\n  animation: ${bounce} 0.5s ease-in infinite;\n`;\n","import React from \"react\";\nimport { ProgressLoader, LoaderCircle } from \"./styles\";\n\nconst Loader = () => {\n  return (\n    <ProgressLoader>\n      <LoaderCircle />\n      <LoaderCircle />\n      <LoaderCircle />\n    </ProgressLoader>\n  );\n};\n\nexport default Loader;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst StyledBtn = styled.button`\n  background-color: palevioletred;\n  color: white;\n  min-height: 40px;\n  height: auto;\n  min-width: 150px;\n  width: auto;\n  text-align: center;\n  border-radius: 33px;\n  &:focus {\n    outline: none;\n  }\n  margin-bottom: 15px;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst Button = ({ text, handleClick }) => {\n  return (\n    <ButtonContainer>\n      <StyledBtn onClick={handleClick}>{text}</StyledBtn>\n    </ButtonContainer>\n  );\n};\n\nButton.propTypes = {\n  text: PropTypes.node.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n\nexport default Button;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Alert = ({ title, content }) => {\n  return (\n    <div>\n      <div\n        className=\"max-width bg-purple-200 border-t-4 border-purple-500 rounded-b text-purple-900 ml-5 px-4 py-3 shadow-md\"\n        role=\"alert\"\n      >\n        <div className=\"flex\">\n          <div className=\"py-1\">\n            <svg\n              className=\"fill-current h-6 w-6 text-purple-500 mr-4\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 20 20\"\n            >\n              <path d=\"M2.93 17.07A10 10 0 1 1 17.07 2.93 10 10 0 0 1 2.93 17.07zm12.73-1.41A8 8 0 1 0 4.34 4.34a8 8 0 0 0 11.32 11.32zM9 11V9h2v6H9v-4zm0-6h2v2H9V5z\" />\n            </svg>\n          </div>\n          <div>\n            <p className=\"font-bold\">{title}</p>\n            <p className=\"text-sm\">{content}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nAlert.defaultProps = {\n  title: \"This is an example title\",\n  content: \"This is an example content text\",\n};\n\nAlert.propTypes = {\n  title: PropTypes.node.isRequired,\n  content: PropTypes.node.isRequired,\n};\n\nexport default Alert;\n","export default {\n  messages: {\n    alerts: {\n      NO_POSTS_TITLE: \"You've read them all\",\n      NO_POSTS_CONTENT:\n        \"You've read all posts that we have for now, please check in later to see if we'll have updated more posts for you\",\n    },\n  },\n};\n","export default {\n  /**\n   * I'll leave this as it is for now, just to make the set up easy.\n   * However, since this is sensitive data, ideally, it shouldn't be part of source control.\n   * I would throw it in .env or find another way of managing secrets.\n   */\n  apiURL: \"https://jsonplaceholder.typicode.com\",\n};\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport PostsList from \"../../components/PostsList\";\nimport Loader from \"../../components/Loader\";\nimport Btn from \"../../components/Button\";\nimport Alert from \"../../components/Alert\";\nimport enums from \"../../enums\";\nimport config from \"../../config\";\n\nconst InfiniteScrolling = () => {\n  const [state, setState] = useState({\n    showBtn: false,\n    showLoader: false,\n    posts: [],\n    filteredPosts: [],\n    showFiltered: false,\n    urlLimit: 10,\n    urlPage: 1,\n    showAlert: {\n      status: false,\n      title: \"\",\n      content: \"\",\n    },\n  });\n\n  const {\n    showBtn,\n    showLoader,\n    posts,\n    urlLimit,\n    urlPage,\n    showAlert: { status, title, content },\n    filteredPosts,\n    showFiltered,\n  } = state;\n\n  // destructure enums\n  const {\n    messages: { alerts },\n  } = enums;\n\n  useEffect(() => {\n    const fetchPosts = async (limit, page) => {\n      setState((state) => ({ ...state, showLoader: true }));\n      let url = `${config.apiURL}/posts?_limit=${limit}&_page=${page}`;\n      const res = await axios.get(url);\n      const data = res.data;\n      // if there're no more posts from the user, notify them\n      if (!data.length) {\n        setState((state) => ({\n          ...state,\n          showAlert: {\n            status: true,\n            title: alerts.NO_POSTS_TITLE,\n            content: alerts.NO_POSTS_CONTENT,\n          },\n        }));\n      }\n      console.log(`*** res **** ${JSON.stringify(data)}`);\n      data.length &&\n        setState((state) => ({\n          ...state,\n          posts: [...posts, ...res.data],\n          showLoader: false,\n        }));\n    };\n\n    fetchPosts(urlLimit, urlPage);\n  }, [urlPage]);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      const {\n        scrollHeight,\n        scrollTop,\n        clientHeight,\n      } = document.documentElement;\n      if (clientHeight + scrollTop >= scrollHeight - 5) {\n        console.log(`*** end of page ***`);\n        setState((state) => ({ ...state, showBtn: true }));\n      }\n    });\n\n    return function cleanUp() {\n      window.removeEventListener(\"scroll\", () => {\n        console.log(`*** clean up: remove eventlistener ***`);\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const loadMorePosts = () => {\n    setState((state) => ({\n      ...state,\n      showBtn: false,\n      showLoader: true,\n      showFiltered: false,\n    }));\n\n    setTimeout(() => {\n      setState((state) => ({\n        ...state,\n        urlPage: urlPage + 1,\n        showLoader: false,\n      }));\n    }, 3000);\n  };\n\n  const filterPosts = (e) => {\n    const searchTerm = e.target.value.toUpperCase();\n    const filtered = posts.filter(\n      (post) =>\n        post.title.toUpperCase().indexOf(searchTerm) > -1 ||\n        post.body.toUpperCase().indexOf(searchTerm) > -1\n    );\n    setState((state) => ({\n      ...state,\n      showFiltered: true,\n      filteredPosts: filtered,\n    }));\n  };\n\n  return (\n    <div>\n      <div className=\"sm:mx-auto max-w-md mt-5 mx-2\">\n        <input\n          className=\"bg-pink-100 appearance-none border-2 border-pink-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-pink-500\"\n          id=\"inline-full-name\"\n          type=\"text\"\n          placeholder=\"Filter posts ...\"\n          onChange={filterPosts}\n        />\n      </div>\n      {status && (\n        <div className=\"fixed z-10\">\n          <Alert title={title} content={content} />\n        </div>\n      )}\n      {showFiltered ? (\n        <PostsList postsList={filteredPosts} />\n      ) : (\n        <PostsList postsList={posts} />\n      )}\n      {/* {posts.length ? <PostsList postsList={posts} /> : null} */}\n      {showBtn && <Btn text=\"Load More\" handleClick={loadMorePosts} />}\n      {showLoader && <Loader />}\n    </div>\n  );\n};\n\nexport default InfiniteScrolling;\n","import React from \"react\";\nimport Infinite from \"./containers/InfiniteScrolling\";\n\nfunction App() {\n  return <Infinite />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/tailwind.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}